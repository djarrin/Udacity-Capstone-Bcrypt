version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@7.2.0
  aws-ecs: circleci/aws-ecs@2.2.1
  kubectl: airswap/kubectl@0.0.3
  aws-eks: circleci/aws-eks@0.2.0
  kubernetes: circleci/kubernetes@0.3.0


commands:
  destroy-infrastrucure:
    description: Destroy cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if ! command -v aws &> /dev/null
            then
              if ! command -v curl &> /dev/null
              then
                apk --no-cache add curl
              fi
              alias python="python3"
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            fi
            aws cloudformation delete-stack --stack-name bcrypt-stack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  build-code:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Code
          command: |
            cd ~/project/
            npm install
            npm run build
      - save_cache:
          paths: [node_modules]
          key: code-build

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "2f:bc:c6:c4:f3:ae:94:b9:b6:78:ac:2a:f8:1f:91:41" ]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -v -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  test-code:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - code-build
      - run:
          name: Test Code
          command: |
            cd ~/project/
            npm install
            npm install cypress
            sudo apt-get update
            sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
            npm run test
      - save_cache:
          paths: [node_modules]
          key: code-build

  lint-code:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - code-build
      - run:
          name: Install Dependencies
          command: |
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
      - run:
          name: Lint Docker File
          command: |
            cd ~/project/
            hadolint Dockerfile
      - run:
          name: Lint Code
          command: |
            cd ~/project/
            npm install
            npm run lint
      - save_cache:
          paths: [node_modules]
          key: code-build

  deploy-image:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl
            sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
            echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y kubectl

      - run:
          name: create deployment of image
          command: |
            kubectl apply -f .circleci/files/deployment.yml
  deploy-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-name:
        description: |
          Name of the docker image to be deployed
        type: string
      version-info:
        description: |
          App version information
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Create deployment manifest
          command: |
            # Replace the placeholders in the manifest with the intended values.
            # This is to avoid hardcoding the image name in the manifest, to make this
            # demo project more portable.
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            cat .circleci/files/app-deployment.yaml.template |\
               sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|\
                g;s|BUILD_DATE_VALUE|$BUILD_DATE|g;s|VERSION_INFO_VALUE|\
                << parameters.version-info >>|g" > .circleci/files/app-deployment.yaml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: ".circleci/files/demo-app-deployment.yaml"
          get-rollout-status: true
          resource-name: deployment/demoapp
      - kubernetes/create-or-update-resource:
          resource-file-path: ".circleci/files/demo-app-service.yaml"

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy Infrastructure as Code
          command: |
            aws cloudformation create-stack --stack-name bcrypt-stack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1 \
              --template-body file://.circleci/files/eks-infrastructure.yml  \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameters ParameterKey=EKSClusterName,ParameterValue=bcrypt-cluster-${CIRCLE_WORKFLOW_ID:0:7} ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Checking on Status of the Stack
          command: |
            started_date=$(date '+%H:%M:%S')
            start=`date +%s`
            success=1
            while true; do
              if [[ $(aws cloudformation describe-stacks --region us-east-1 --stack-name bcrypt-stack-${CIRCLE_WORKFLOW_ID:0:7} --query "Stacks[*].StackStatus" --output text) == CREATE_IN_PROGRESS ]]
              then
                echo -e "EKS Cluster status : CREATE IN PROGRESS \n"
                sleep 10
              elif [[ $(aws cloudformation describe-stacks --region us-east-1 --stack-name bcrypt-stack-${CIRCLE_WORKFLOW_ID:0:7} --query "Stacks[*].StackStatus" --output text) == CREATE_COMPLETE ]]
              then
                echo -e "EKS Cluster status : SUCCESSFULLY CREATED \n"
                end=`date +%s`
                runtime=$((end-start))
                finished_date=$(date '+%H:%M:%S')
                echo "started at :" $started_date
                echo "finished at :" $finished_date
                hours=$((runtime / 3600)); minutes=$(( (runtime % 3600) / 60 )); seconds=$(( (runtime % 3600) % 60 )); echo "Total time : $hours h $minutes min $seconds sec"
                break
              elif [[ $(aws cloudformation describe-stacks --region us-east-1 --stack-name bcrypt-stack-${CIRCLE_WORKFLOW_ID:0:7} --query "Stacks[*].StackStatus" --output text) == ROLLBACK_IN_PROGRESS ]]
              then
                return 1
                break
              else
                echo -e "EKS Cluster status : $(aws cloudformation describe-stacks --region us-east-1 --stack-name bcrypt-stack-${CIRCLE_WORKFLOW_ID:0:7} --query "Stacks[*].StackStatus" --output text) \n"
                break
              fi
            done
      - destroy-infrastrucure

  cleanup-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Delete Old Workflow Stack
          command: |
            export OldWorkflowID=$(aws cloudformation \
                                         list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                                         --no-paginate --output text)
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                                  --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo "Stack names: ${STACKS[@]}"

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo BASH_REMATCH
              aws cloudformation delete-stack --stack-name bcrypt-stack-${BASH_REMATCH}
            fi
workflows:
  default:
    jobs:
#      - build-code
#      - lint-code:
#          requires: [build-code]
#      - test-code:
#          requires: [build-code]
#      - aws-ecr/build-and-push-image:
#          repo: "djarrin_udacity"
#          account-url: AWS_ECR_ACCOUNT_URL
#          aws-access-key-id: AWS_ACCESS_KEY_ID
#          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
#          region: AWS_REGION
#          tag: "udacity_bcrypt_latest"
#          requires: [ lint-code, test-code ]
#          filters:
#            branches:
#              only:
#                - master
#                - deployment
      - deploy-application:
          cluster-name: bcrypt-cluster-32432
          aws-region: us-east-1
          docker-image-name: "135924004413.dkr.ecr.us-east-1.amazonaws.com/djarrin_udacity:udacity_bcrypt_latest"
          version-info: "${CIRCLE_SHA1}"
          filters:
            branches:
              only:
                - master
                - deployment
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - deploy-infrastructure
      - cleanup-infrastructure:
          requires: [ deploy-infrastructure ]
          filters:
            branches:
              only:
                - deploy-infrastructure
