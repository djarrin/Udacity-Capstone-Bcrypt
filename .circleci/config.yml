version: 2.1

commands:
  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if ! command -v aws &> /dev/null
            then
              if ! command -v curl &> /dev/null
              then
                apk --no-cache add curl
              fi
              alias python="python3"
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            fi
            aws cloudformation delete-stack --stack-name bcrypt-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  build-code:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Code
          command: |
            cd ~/project/
            npm install
            npm run build
      - save_cache:
          paths: [node_modules]
          key: code-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure application infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/application-server.yml \
              --tags project=bcrypt \
              --stack-name "bcrypt-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment

  test-code:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - code-build
      - run:
          name: Test Code
          command: |
            cd ~/project/
            npm install
            npm install cypress
            sudo apt-get update
            sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
            npm run test
      - save_cache:
          paths: [node_modules]
          key: code-build

  lint-code:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - code-build
      - run:
          name: Install Dependencies
          command: |
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
      - run:
          name: Lint Docker File
          command: |
            cd ~/project/
            hadolint Dockerfile
      - run:
          name: Lint Code
          command: |
            cd ~/project/
            npm install
            npm run lint
      - save_cache:
          paths: [node_modules]
          key: code-build

  build-deploy-docker-image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: Build and Deploy Docker Image
          command: |
            cd ~/project/
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
            ./docker_build_deploy.sh
#    https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/:
workflows:
  default:
    jobs:
      - build-code
      - deploy-infrastructure:
          filters:
            branches:
              only: [ feature/Setup-Infrastructure ]
      - lint-code:
          requires: [build-code]
      - test-code:
          requires: [build-code]
      - build-deploy-docker-image:
          requires: [lint-code, test-code]
