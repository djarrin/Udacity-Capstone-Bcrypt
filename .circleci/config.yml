version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@7.2.0
  aws-ecs: circleci/aws-ecs@2.2.1

commands:
  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if ! command -v aws &> /dev/null
            then
              if ! command -v curl &> /dev/null
              then
                apk --no-cache add curl
              fi
              alias python="python3"
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            fi
            aws cloudformation delete-stack --stack-name bcrypt-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  build-code:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Code
          command: |
            cd ~/project/
            npm install
            npm run build
      - save_cache:
          paths: [node_modules]
          key: code-build

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "2f:bc:c6:c4:f3:ae:94:b9:b6:78:ac:2a:f8:1f:91:41" ]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -v -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  deploy-application:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "2f:bc:c6:c4:f3:ae:94:b9:b6:78:ac:2a:f8:1f:91:41" ]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Start Up Server
          command: |
            ansible-playbook -v -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/start-server.yml
#      - destroy-environment

  test-code:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - code-build
      - run:
          name: Test Code
          command: |
            cd ~/project/
            npm install
            npm install cypress
            sudo apt-get update
            sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
            npm run test
      - save_cache:
          paths: [node_modules]
          key: code-build

  lint-code:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - code-build
      - run:
          name: Install Dependencies
          command: |
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
      - run:
          name: Lint Docker File
          command: |
            cd ~/project/
            hadolint Dockerfile
      - run:
          name: Lint Code
          command: |
            cd ~/project/
            npm install
            npm run lint
      - save_cache:
          paths: [node_modules]
          key: code-build

workflows:
  default:
    jobs:
      - build-code
      - lint-code:
          requires: [build-code]
      - test-code:
          requires: [build-code]
      - deploy-infrastructure:
          requires: [lint-code, test-code]
          filters:
            branches:
              only:
                - deploy-infrastructure
